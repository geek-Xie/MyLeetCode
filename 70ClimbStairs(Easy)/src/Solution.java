/**
 * 70. 爬楼梯
 *
 * 假设你正在爬楼梯。需要 n阶你才能到达楼顶。
 *
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 *
 * 注意：给定 n 是一个正整数。
 *
 * 示例 1：
 * 输入： 2
 * 输出： 2
 * 解释： 有两种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶
 * 2.  2 阶
 *
 *
 * 示例 2：
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 */

public class Solution {
    /**
     * 考虑到最后一步可能走1级台阶或者两级台阶，我们可以得到当前台阶数的方案数f(x)会等于最后一步是爬1级的方案数加上最后一步是爬
     * 两级的方案数量，即f(x) = f(x - 1) + f(x - 2)，因此可以通过这个递推式来解决问题。
     * @param n
     * @return
     */
    public int climbStairs(int n) {
        // 当当前是0级楼梯时，没有方案
        if (n == 0)
            return 0;
        // 当当前是1级楼梯时，只有1中爬楼梯的方案
        if (n == 1)
            return 1;
        // 当当前是2级楼梯时，有2种爬楼梯的方案
        if (n == 2)
            return 2;
        // 之前得到的递推式
        return climbStairs(n - 1) + climbStairs(n - 2);
    }
}
