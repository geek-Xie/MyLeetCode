/**
 * 136. 只出现一次的数字
 *
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
 *
 * 说明：
 *
 * 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 *
 * 示例 1:
 * 输入: [2,2,1]
 * 输出: 1
 *
 *
 * 示例 2:
 * 输入: [4,1,2,1,2]
 * 输出: 4
 */

public class Solution {
    /**
     * 这里利用了异或运算，异或运算的性质是
     * 1.任何数与自身做异或运算，结果是0
     * 2.任何数与0做异或运算结果还是本身
     * 3.异或运算满足交换律和结合律
     * 根据以上三条性质，再加上题目的条件，我们将数组中的所有元素进行异或运算，因为满足交换律和结合律，则重复2次的元素可以与自身异或得0，然后单独的那个数和许多的0异或之后结果仍然是本身，
     * 即整个数组进行异或最后得到的结果就是那个单独的数
     * @param nums
     * @return
     */
    public int singleNumber(int[] nums) {
        int single = 0;
        // 对整个数组的元素进行异或运算
        for (int num : nums)
            single ^= num;
        // 最终的结果就是那个只出现一次的数
        return single;
    }
}
