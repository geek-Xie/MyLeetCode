/**
 * 55. 跳跃游戏
 *
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 *
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 *
 * 判断你是否能够到达最后一个位置。
 *
 * 示例1:
 *
 * 输入: [2,3,1,1,4]
 * 输出: true
 * 解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
 * 示例2:
 *
 * 输入: [3,2,1,0,4]
 * 输出: false
 * 解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
 */

public class Solution {
    /**
     * 使用贪心法解决问题
     * 对于这个数组，我们遍历它的每一个元素，并且计算在当前这个位置可以到达的最远的长度，并且维护这个最远长度，在后续如果有可以到达更远的
     * 长度我们就覆盖它，最后如果这个最远长度大于数组的长度，即表示数组的最后一个位置是可以到达的。
     * @param nums
     * @return
     */
    public static boolean canJump(int[] nums) {
        // 获得数组的长度
        int len = nums.length;
        // 记录可以到达的最远的长度
        int rightmost = 0;
        // 遍历数组，更新最远长度
        for (int i = 0; i < len; i++) {
            if (i <= rightmost) {
                // 如果当前位置的能够到达的最远长度大于之前的最远长度，就覆盖它
                rightmost = Math.max(rightmost, i + nums[i]);
                // 如果当前的最远长度大于数组的长度，即表示能够到达数组的最后一个位置，返回true
                if (rightmost >= len - 1) {
                    return true;
                }
            }
        }
        // 否则返回false
        return false;
    }
}
