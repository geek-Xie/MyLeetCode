/**
 * 91. 解码方法
 *
 * 条包含字母A-Z 的消息通过以下方式进行了编码：
 *
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * 给定一个只包含数字的非空字符串，请计算解码方法的总数。
 *
 * 题目数据保证答案肯定是一个 32 位的整数。
 *
 * 示例 1：
 * 输入："12"
 * 输出：2
 * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 *
 *
 * 示例 2：
 * 输入："226"
 *
 *
 * 输出：3
 * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 *
 *
 * 示例 3：
 * 输入：s = "0"
 * 输出：0
 *
 *
 * 示例 4：
 * 输入：s = "1"
 * 输出：1
 *
 *
 * 示例 5：
 * 输入：s = "2"
 * 输出：1
 *
 * 提示：
 * 1 <= s.length <= 100
 * s 只包含数字，并且可以包含前导零。
 */

class Solution {
    /**
     * 使用动态规划解决问题
     * 思路：
     * 这是一题典型的动态问题，但是需要考的情况较多
     * dp数组表示长度为i的字符可以表示的解码次数
     * 初始化 dp[0] = 1;dp[1] = 1;(防止索引越界)
     * 情况讨论：
     * 1.当一个数为0时，结果肯定是0；
     * 2.当长度为1时，肯定是1（此处排除了0）
     * 3.当字符大于等于2时的情形：
     *      1.当前字符为0且上一个字符为0或者当前字符为0上一个字符大于2（即120，130）这种情况下不能解码，返回0
     *      2.当前字符为0，那么当前字符只能与前一个字符组成组合 dp[i] = dp[i-2]
     *      3.当前字符不是0，但前一个字符是，这种情况下，该字符只能独立解码，dp[i] = dp[i-1];
     *      4.常规情况，当前字符与上一个字符的和>26(直接拼成string与26比较也可)，如果大于26，那么这2字符只能一组，dp[i] = dp[i-2],否则，dp[i] = dp[i-2]+dp[i-1]。
     *
     * @param s 输入的字符串
     * @return
     */
    public int numDecodings(String s) {
        // 如果输入的是0，则直接返回0
        if (s.charAt(0) == '0') {
            return 0;
        }
        // 创建动态规划数组，数组的第i个位置表示
        int[] dp = new int[s.length() + 1];
        // 当为0时，结果肯定是0，只有1种
        dp[0] = 1;
        // 当数字长度为1时，对应的字母只有1个，结果肯定是1，只有1种
        dp[1] = 1;
        // 当输入的数字位数是1的时候，对应的结果肯定只有1个，直接返回dp[1]
        if (s.length() == 1)
            return dp[1];

        // 当输入的数字有多位时
        for (int i = 2; i <= s.length(); i++) {
            //得到当前数；
            int num = Integer.parseInt(String.valueOf(s.charAt(i - 1)));
            //得到当前数的前一个数
            int nums2 = Integer.parseInt(String.valueOf(s.charAt(i - 2)));

            if (nums2 + num == 0 || (num == 0 && nums2 > 2))
                return 0;
            else if (num == 0 || nums2 == 0)
                dp[i] = num == 0 ? dp[i - 2] : dp[i - 1];
            else
                dp[i] = nums2 * 10 + num > 26 ? dp[i - 1] : dp[i - 2] + dp[i - 1];
        }
        return dp[s.length()];
    }
}