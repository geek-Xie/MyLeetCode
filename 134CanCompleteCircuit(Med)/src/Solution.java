/**
 * 134. 加油站
 *
 * 在一条环路上有N个加油站，其中第i个加油站有汽油gas[i]升。
 *
 * 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1个加油站需要消耗汽油cost[i]升。你从其中的一个加油站出发，开始时油箱为空。
 *
 * 如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。
 *
 * 说明:
 * 如果题目有解，该答案即为唯一答案。
 * 输入数组均为非空数组，且长度相同。
 * 输入数组中的元素均为非负数。
 *
 *
 * 示例1:
 * 输入:
 * gas  = [1,2,3,4,5]
 * cost = [3,4,5,1,2]
 *
 * 输出: 3
 *
 * 解释:
 * 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
 * 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
 * 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
 * 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
 * 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
 * 因此，3 可为起始索引。
 *
 *
 * 示例 2:
 * 输入:
 * gas  = [2,3,4]
 * cost = [3,4,3]
 *
 * 输出: -1
 *
 * 解释:
 * 你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
 * 我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
 * 开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
 * 你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
 * 因此，无论怎样，你都不可能绕环路行驶一周。
 */

public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        // 加油站的个数
        int len = gas.length;
        // 从第一个加油站开始判断是否能够围绕一圈
        for (int i = 0; i < len; i++) {
            // 如果从当前加油站出发可以围绕一圈，则直接返回当前加油站的下标
            if (canarrive(gas, cost, i))
                return i;
        }
        // 没有可行的解决方案，返回 -1
        return -1;
    }

    /**
     * 用来判断当前加油站作为起点是否能够围绕一圈
     * @param gas
     * @param cost
     * @param index
     * @return
     */
    private boolean canarrive(int[] gas, int[] cost, int index) {
        // 初始化邮箱的剩余量
        int contain = 0;
        int len = gas.length;
        // 计数
        int times = 0;
        while (times < len) {
            // 加油
            contain += gas[index];
            // 消耗
            contain -= cost[index];
            // 如果到达时，油箱容量为负，则说明此方案不可行，返回false
            if (contain < 0)
                return false;
            // 移动下标
            index = (index + 1) % len;
            // 计数
            times++;
        }
        return true;
    }
}
